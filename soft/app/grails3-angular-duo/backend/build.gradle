buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.1.1'
    }
}

plugins {
    id "io.spring.dependency-management" version "0.5.2.RELEASE"
}

version "1.0"
group "duo"

apply plugin: "spring-boot"
apply plugin: "war"
apply plugin: "asset-pipeline"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
    minifyJs = true
    minifyCss = true
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"

    compile "org.grails.plugins:hibernate"
    compile "org.grails.plugins:cache"
    compile "org.hibernate:hibernate-ehcache"
    compile "org.grails.plugins:scaffolding"

    compile 'org.grails.plugins:spring-security-core:3.0.0.M1'
    compile 'org.grails.plugins:mail:2.0.0.RC2'

    runtime "org.grails.plugins:asset-pipeline"

    testCompile "org.grails:grails-plugin-testing"

    console "org.grails:grails-console"
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

//gradle frontend plugin

// Task to run the front-end opening a new shell
task cleanFrontend(type:Exec) {
    workingDir '../frontend'
    executable "sh"
    args "-c", "gulp clean"
}

// Task to run the front-end opening a new shell
task runFrontend(type:Exec) {
    workingDir '../frontend'
    executable "sh"
    args "-c", "gulp serve"
}

// Task to build the front-end opening a new shell
task buildFrontend(type:Exec) {
    workingDir '../frontend'
    executable "sh"
    args "-c", "gulp build"
}

// Task to test the front-end opening a new shell
task testFrontend(type:Exec) {
    workingDir '../frontend'
    executable "sh"
    args "-c", "gulp test"
}

// Set up dependencies on the front-end when building the war, running or testing the app
clean.dependsOn cleanFrontend
run.dependsOn runFrontend
test.dependsOn testFrontend
war.dependsOn buildFrontend

